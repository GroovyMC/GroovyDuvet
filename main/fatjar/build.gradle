import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    alias libs.plugins.cursegradle
    alias libs.plugins.minotaur
}

archivesBaseName = "${rootProject.name}"

configurations {
    includeFull {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    includeFull project(path: ':core', configuration: 'fullJars')
    compileOnlyApi project( path: ':core', configuration: 'namedElements' )
    runtimeOnly project(':core')

    includeFull project(path: ':wrapper:qsl', configuration: 'fullJars')
    compileOnlyApi project( path: ':wrapper:qsl', configuration: 'namedElements' )
    runtimeOnly project(':wrapper:qsl')

    include libs.cgl
    modApi(libs.cgl) {
        exclude group: 'org.apache.groovy'
    }
}

tasks.remapFullJar.with {
    it.archiveClassifier.set 'full-partial'
}

tasks.register("updateModsJson", DefaultTask) {
    dependsOn tasks.remapFullJar

    inputs.file(tasks.remapFullJar.archiveFile)

    doLast {

        def json = new JsonSlurper().parseText(file("${buildDir}/META-INF/quilt.mod.json").text)
        json['jars'] = (json['jars']?[]) + configurations.includeFull.files.collect { it.name }
        file("${buildDir}/META-INF/quilt.mod.json").text = new JsonBuilder(json).toPrettyString()
    }
}

tasks.register("extractQuiltModsJson", Copy) {
    dependsOn configurations.includeFull
    dependsOn tasks.remapFullJar

    from(zipTree(tasks.remapFullJar.archiveFile)) {
        include('quilt.mod.json')
    }
    into("${buildDir}/extractQuiltModsJson/")

    doLast {
        def qmjFile = file("${buildDir}/extractQuiltModsJson/quilt.mod.json")
        if (qmjFile.exists()) {
            def json = new JsonSlurper().parseText(qmjFile.text)
            json?.quilt_loader = (json?.quilt_loader?:[:])
            json?.quilt_loader?.jars = (json?.quilt_loader?.jars?:[]) + configurations.includeFull.files.collect { "META-INF/jars/${it.name}" }
            file("${buildDir}/extractQuiltModsJson/quilt.mod.json").text = new JsonBuilder(json).toPrettyString()
        }
    }
}

tasks.register("prepareFullJar", Jar) {
    from(zipTree(tasks.remapFullJar.archiveFile)) {
        exclude('quilt.mod.json')
    }
    dependsOn tasks.remapFullJar
    dependsOn tasks.extractQuiltModsJson
    dependsOn configurations.includeFull
    archiveClassifier.set 'full'

    metaInf {
        into 'jars'
        from configurations.includeFull
    }

    from(fileTree("${buildDir}/extractQuiltModsJson")) {
        include('quilt.mod.json')
    }
}

machete {
    additionalTasks.add("prepareFullJar")
}

jar {
    manifest.attributes([
            'Specification-Title': 'GroovyDuvet',
            'Specification-Vendor': 'Luke Bemish',
            'Specification-Version': 1,
            'Implementation-Title':"${archivesBaseName}",
            'Implementation-Version': project.version,
            'Implementation-Vendor' : 'Luke Bemish',
            'Implementation-Timestamp': new Date().format(/yyyy-MM-dd'T'HH:mm:ssZ/),
            'GitCommit': getGitCommit(),
            'Automatic-Module-Name': 'io.github.lukebemish.groovyduvet'
    ])
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact rootProject.tasks.groovydocJar
            artifact(rootProject.changelog.output.get().asFile) {
                it.builtBy rootProject.changelog
                it.extension = 'txt'
                it.classifier = 'changelog'
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = rootProject.ext.mavenLoginUser
                password = rootProject.ext.mavenLoginPassword
            }
        }
    }
}

curseforge {
    apiKey = rootProject.findProperty('curseforge_key') ?: System.getenv('CURSEFORGE_TOKEN') ?: ''
    project {
        id = '665821'
        releaseType = "${rootProject.ext.versionBasedReleaseType}"
        addGameVersion "${libs.versions.minecraft.get()}"
        addGameVersion 'Quilt'
        mainArtifact(tasks.prepareFullJar) {
            displayName = "GroovyDuvet v$project.version"
        }
        relations {
            requiredDependency 'qsl'
        }
        changelog = rootProject.tasks.changelog.output.asFile.get()
    }
    options {
        forgeGradleIntegration = false
    }
}

tasks.curseforge.dependsOn rootProject.tasks.changelog
tasks.curseforge.dependsOn tasks.optimizeOutputsOfPrepareFullJar

modrinth {
    token = rootProject.findProperty('modrinth_key') ?: System.getenv('MODRINTH_TOKEN') ?: ''
    projectId = 'groovyduvet'
    versionNumber = "$project.version"
    versionType = "${rootProject.ext.versionBasedReleaseType}"
    detectLoaders = false
    uploadFile = tasks.prepareFullJar
    gameVersions = ["${libs.versions.minecraft.get()}"]
    loaders = ['quilt']
    changelog.set(rootProject.tasks.changelog.output.map {
        it.asFile.text
    })
    dependencies {
        required.project 'qsl'
    }
}

tasks.named('modrinth') {
    dependsOn(rootProject.tasks.changelog)
    dependsOn(tasks.optimizeOutputsOfPrepareFullJar)
}

tasks.named('generateMetadataFileForMavenJavaPublication') {
    dependsOn tasks.optimizeOutputsOfRemapJar
}
