plugins {
    id "com.dorongold.task-tree" version "2.1.0"
    id 'groovy'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'io.github.groovymc.modsdotgroovy' version '1.1.1'
}

modsDotGroovy {
    dslVersion = '1.1.3'
    platform 'quilt'
}

sourceSets {
    transform
    main {
        compileClasspath += transform.output
    }
}

repositories {
    maven {
        name = "TheModdingInquisition"
        url = 'https://maven.moddinginquisition.org/releases'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    mavenCentral()
}

license {
    header = project.file('../header.txt')
    exclude '**/package-info.java'
}

configurations {
    relocateSource
}

dependencies {
    compileOnly libs.groovy

    transformCompileOnly libs.groovy

    relocateSource "io.github.groovymc.modsdotgroovy:dsl:${libs.versions.mdg.get()}:sources"
}

tasks.named('compileGroovy',GroovyCompile) {
    source zipTree(configurations.relocateSource.singleFile).files
}

jar {
    from(project.file("../LICENSE")) {
        rename { "${it}-${archivesBaseName}" }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

processResources {
    inputs.property "version", version

    filesMatching('META-INF/groovy/') {
        expand "version": version
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
    groovyOptions.optimizationOptions.groovydoc = true
}

tasks.groovydoc.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = findProperty('inquisitionMavenUser') ?: ''
                password = findProperty('inquisitionMavenPassword') ?: ''
            }
        }
    }
}