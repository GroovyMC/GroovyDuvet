plugins {
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    alias libs.plugins.fabric.loom
    alias libs.plugins.mdg
    alias libs.plugins.managedversioning
    alias libs.plugins.curseforgegradle
    alias libs.plugins.minotaur
    alias libs.plugins.nexuspublish
}

managedVersioning {
    versionFile.set rootProject.file('version.properties')

    gitHubActions {
        release {
            prettyName.set 'Release'
            workflowDispatch.set(true)
            gradleJob {
                name.set 'build'
                step {
                    setupGitUser()
                }
                readOnly.set false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                step {
                    run.set 'git push && git push --tags'
                }
                gradlew 'Publish', 'publish', 'closeAndReleaseSonatypeStagingRepository', 'curseforge', 'modrinth'
                secret('CENTRAL_MAVEN_USER')
                secret('CENTRAL_MAVEN_PASSWORD')
                secret('GPG_SIGNING_KEY')
                secret('GPG_KEY_PASSWORD')
                secret('CURSEFORGE_KEY')
                secret('MODRINTH_KEY')
            }
        }
    }
}

managedVersioning.apply()

println "Building: $version"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

import net.fabricmc.loom.task.RemapJarTask

loom {
    mods {
        groovyduvet_test {
            sourceSet 'test'
        }
    }

    runs.each {
        it.source sourceSets.test
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
        content {
            includeGroup 'org.parchmentmc.data'
        }
    }
}

sourceSets.test.modsDotGroovy.enable()

configurations {
    javadocElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.DOCUMENTATION))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.class, Bundling.EXTERNAL))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType.class, DocsType.JAVADOC))
        }
    }

    groovydocInclude {
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType.class, DocsType.SOURCES))
        }
        transitive = false
    }

    localApi
    compileOnlyApi.extendsFrom localApi
    runtimeClasspath.extendsFrom localApi
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    }

    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    annotationProcessor libs.autoextension
    annotationProcessor libs.autoservice
    compileOnly libs.autoextension
    compileOnly libs.autoservice

    localApi libs.groovyduvet.core
    include libs.groovyduvet.core

    include libs.cgl
    modApi libs.cgl

    groovydocInclude libs.cgl
    groovydocInclude libs.groovyduvet.core
}

tasks.named('jar', Jar) {
    from(project.file("LICENSE")) {
        rename { "${it}-${archivesBaseName}" }
    }
    manifest.attributes([
            'Specification-Title': 'GroovyDuvet',
            'Specification-Vendor': 'Luke Bemish',
            'Specification-Version': 1,
            'Implementation-Title':"${archivesBaseName}",
            'Implementation-Version': project.version,
            'Implementation-Vendor' : 'Luke Bemish',
            'Implementation-Commit-Time': managedVersioning.timestamp,
            'Implementation-Commit': managedVersioning.hash
    ])
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

tasks.remapJar.with {
    it.addNestedDependencies = false
}

tasks.register("remapFullJar", RemapJarTask) {
    it.targetNamespace = "intermediary"
    it.inputFile = tasks.jar.archiveFile
    it.dependsOn tasks.jar
    it.archiveClassifier.set 'full'
    it.addNestedDependencies = true
}

tasks.build.dependsOn(tasks.remapFullJar)

tasks.register("devTestJar", Jar) {
    from(sourceSets.test.output)
    archiveClassifier.set 'test-dev'
}

tasks.register("testJar", RemapJarTask) {
    it.targetNamespace = "intermediary"
    it.inputFile = tasks.devTestJar.archiveFile
    it.dependsOn tasks.devTestJar
    it.archiveClassifier.set 'test'
    it.addNestedDependencies = false
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
    groovyOptions.optimizationOptions.groovydoc = true
    it.groovyOptions.javaAnnotationProcessing = true
    it.exclude('mods.groovy')
    options.compilerArgs += [
            "-Aautoextension.name=${project.name}",
            "-Aautoextension.version=${version}"
    ]
}

groovydoc {
    configurations.groovydocInclude.each {
        source zipTree(it)
    }
    use = true
    docTitle = "GroovyDuvet v${version} - API"

    exclude 'enhancedgroovy/'
    exclude 'mods.groovy'
    exclude 'META-INF/'
    exclude '**/impl/**'
    exclude 'org/groovymc/groovyduvet/core/mixin/**'
}

tasks.register('groovydocJar', Jar) {
    archiveClassifier = 'javadoc'
    from groovydoc.destinationDir
    dependsOn(groovydoc)
}

artifacts {
    javadocElements groovydocJar
}

project.components.named("java").configure {
    AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) it
    javaComponent.addVariantsFromConfiguration(configurations.javadocElements) {}
}

tasks.build.dependsOn(tasks.groovydocJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "GroovyDuvet"
                packaging = 'jar'
                description = 'Wrapper library for mods written in groovy for the fabric loader'
                url = 'https://github.com/GroovyMC/GroovyDuvet'
                inceptionYear = '2023'

                licenses {
                    license {
                        name = 'LGPL 3.0 or later'
                        url = 'https://opensource.org/license/lgpl-3-0/'
                    }
                }
                developers {
                    developer {
                        id = 'groovymc'
                        name = 'GroovyMC'
                        email = 'holdings@groovymc.org'
                        url = 'https://github.com/GroovyMC/'
                    }
                }
                scm {
                    connection='scm:git:git://github.com/GroovyMC/GroovyDuvet.git'
                    url='https://github.com/GroovyMC/GroovyDuvet'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(System.getenv('CENTRAL_MAVEN_USER') ?: '')
            password.set(System.getenv('CENTRAL_MAVEN_PASSWORD') ?: '')
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
        }
    }
}

if (System.getenv('CENTRAL_MAVEN_USER')) {
    signing {
        final signingKey = System.getenv('GPG_SIGNING_KEY') ?: ''
        final signingPassword = System.getenv('GPG_KEY_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY') ?: ''
        projectId = 'groovyduvet'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = tasks.remapFullJar
        gameVersions = ["${libs.versions.minecraft.get()}"]
        loaders = ['quilt', 'fabric']
        dependencies {
            required.project 'fabric-api'
        }
    }
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (System.getenv('CURSEFORGE_KEY')) {
    tasks.register('curseforge', TaskPublishCurseForge) {
        dependsOn tasks.remapFullJar
        disableVersionDetection()
        apiToken = System.getenv('CURSEFORGE_KEY')
        def projectId = '665821'
        def mainFile = upload(projectId, tasks.remapFullJar)
        mainFile.displayName = "GroovyDuvet v$project.version"
        mainFile.releaseType = "${project.release_type}"
        mainFile.addModLoader('Fabric')
        mainFile.addModLoader('Quilt')
        mainFile.addGameVersion("${libs.versions.minecraft.get()}")
        mainFile.changelog = ''
        mainFile.addRequirement("fabric-api")
    }

    afterEvaluate {
        tasks.curseforge.dependsOn tasks.remapFullJar
    }
}
